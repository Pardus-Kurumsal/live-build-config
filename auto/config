#!/bin/bash

set -e
set -o pipefail # Bashism

#ISO volume name that will be appeared when the image is
#burned into a drive
pardus_iso_volume_name="Pardus 17 Calisan"

# You can put local mirrors here if you want
pardus_mirror=http://depo.pardus.org.tr/pardus
pardussec_mirror=http://depo.pardus.org.tr/guvenlik

### DO NOT EDIT THE REST OF THIS FILE ###

public_pardus_mirror=http://depo.pardus.org.tr/pardus
public_pardussec_mirror=http://depo.pardus.org.tr/guvenlik

# Detect target architecture and filter args
temp=""
arch=$(dpkg --print-architecture)
dist="onyedi"
lb_opts=""
while [ $# -gt 0 ]; do
   	arg="$1"
	case "$arg" in
        -a|--arch|--architecture|--architectures)
		arch="$2"
		temp="$temp "'"'"$arg"'"'
		temp="$temp "'"'"$2"'"'
		shift
		;;
	--distribution)
		dist="$2"
		shift
		;;
	--variant)
		variant="$2"
		shift
		;;
	-p|--proposed-updates)
		enable_pu="1"
		;;
	--)
		# Skip the separator, it was added so that "lb config"
		# doesn't barf on our own options, but now we are
		# filtering them away assuming that the remaining ones
		# are intended for lb config !
		;;
	*)
		temp="$temp "'"'"$arg"'"'
		;;
	esac
	shift
done
eval set -- "$temp"

# Resolve release name
dist=$(curl -s $pardus_mirror/dists/$dist/Release | awk '/^Codename:/ {print $2}')

# live-build doesn't work if --parent-debian-distribution is unknown of
# debian-cd => we have to put a symlink so that it deals with pardus like sid
if [ ! -e ${LIVE_BUILD:-/usr/share/live/build}/data/debian-cd/$dist ]; then
	if [ -w ${LIVE_BUILD:-/usr/share/live/build}/data/debian-cd ]; then
		ln -sf sid ${LIVE_BUILD:-/usr/share/live/build}/data/debian-cd/$dist
	else
		echo "ERROR: Run this first:"
		echo "ln -sf sid ${LIVE_BUILD:-/usr/share/live/build}/data/debian-cd/$dist"
		exit 1
	fi
fi

# Define options that vary across architectures
case "$arch" in
    amd64)
	lb_opts="$lb_opts --debian-installer live"
    ;;
    i386)
	lb_opts="$lb_opts --debian-installer live --linux-flavours 686-pae"
    ;;
    armel|armhf)
	lb_opts="$lb_opts --binary-images hdd --binary-filesystem ext4 --chroot-filesystem none"
    ;;
    *)
	echo "WARNING: configuration not tested on arch $arch" >&2
    ;;
esac

# Define options that vary across releases
case "$dist" in
    onyedi)
	lb_opts="$lb_opts --mirror-chroot-security $pardussec_mirror"
	lb_opts="$lb_opts --mirror-binary-security $public_pardussec_mirror"
    ;;
    *)
	lb_opts="$lb_opts --security false"
    ;;
esac

# Setup configuration files from variant and options

# Drop all files that a former run might have put into place
for file in $(cd pardus-config && find . -type f); do
    file=${file#./*/}
    rm -f config/$file
done
rm -f config/archives/pardus-proposed-updates.list.*

# Copy over all files from official pardus configuration
cp -rT pardus-config/common config
[ ! -d pardus-config/release-$dist ] || cp -rTL pardus-config/release-$dist config
[ ! -d pardus-config/variant-$variant ] || cp -rTL pardus-config/variant-$variant config

if [ -n "$enable_pu" ]; then
	mkdir -p config/archives
	echo "deb $pardus_mirror $dist-proposed-updates main contrib non-free" \
		> config/archives/pardus-proposed-updates.list.chroot
	echo "deb $public_pardus_mirror $dist-proposed-updates main contrib non-free" \
		> config/archives/pardus-proposed-updates.list.binary
fi

lb config noauto \
	--distribution "$dist" \
	--debian-installer-distribution "$dist" \
	--archive-areas "main contrib non-free" \
	--debootstrap-options "--keyring=/usr/share/keyrings/pardus-archive-keyring.gpg" \
	--keyring-packages pardus-archive-keyring \
	--updates false \
	--backports false \
	--source false \
	--firmware-binary true \
	--firmware-chroot true \
	--mirror-bootstrap "$pardus_mirror" \
	--mirror-debian-installer "$pardus_mirror" \
	--mirror-binary "$public_pardus_mirror" \
	--iso-application "Pardus" \
	--iso-publisher "Pardus" \
	--iso-volume "$pardus_iso_volume_name" \
	--linux-packages linux-image \
	--memtest memtest86 \
	$lb_opts \
	"$@"
